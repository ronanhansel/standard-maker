'use client';

import { useState } from 'react';
import type { DictionaryType } from '@/lib/types';
import { cn } from '@/lib/utils';
import MathSuggest2SVG from '@/public/images/features/math_suggest_2.svg';
import MathSuggestSVG from '@/public/images/features/math_suggest.svg';
import ModelsSVG from '@/public/images/features/models.svg';
import {
  IconAdjustmentsBolt,
  IconBolt,
  IconBrain,
  IconCloudNetwork,
  IconEaseInOut,
  IconHeart,
  IconPhoto,
  IconSchool
} from '@tabler/icons-react';
import { motion } from 'framer-motion';
import Image from 'next/image';

export const SmartestNoteTakingApp = ({ dictionary }: { dictionary: DictionaryType }) => {
  return (
    <div className='flex h-fit flex-col gap-10 bg-gradient-to-b from-neutral-100/5 via-neutral-900/90 to-transparent'>
      <FromYourAcademicNeeds dictionary={dictionary} />
      <PoweredByAI dictionary={dictionary} />
      <AIFeatures dictionary={dictionary} />
    </div>
  );
};

const FromYourAcademicNeeds = ({ dictionary }: { dictionary: DictionaryType }) => {
  const [isHoveredImage, setIsHoveredImage] = useState(false);

  return (
    <div className='relative h-fit w-full overflow-hidden md:h-[1100px]'>
      <div className='mx-auto max-w-7xl px-10'>
        <h1 className='z-20 mt-6 max-w-2xl bg-gradient-to-b from-white via-white to-neutral-800 bg-clip-text py-6 text-start font-semibold text-transparent'>
          {dictionary.smartest.academicNeeds}
        </h1>
        <p className='text-muted-foreground max-w-xl'>
          <b className='font-medium text-white'>{dictionary.smartest.academicTagline}</b>{' '}
          {dictionary.smartest.academicDescription}
        </p>
      </div>
      <div className='mt-10 flex h-full w-full items-start justify-center gap-4'>
        <div className='col-span-2'></div>
        <motion.div
          onMouseEnter={() => setIsHoveredImage(true)}
          onMouseLeave={() => setIsHoveredImage(false)}
          className={cn(
            'relative col-span-6',
            'flex w-[1000px] -rotate-x-25 -rotate-y-15 -rotate-z-10 flex-col gap-2 rounded-lg border-2 object-cover px-3 py-4'
          )}
        >
          <div
            className='flex h-[500px] flex-col gap-2 overflow-y-auto px-8'
            style={{ scrollbarWidth: 'none' }}
          >
            <h1 className=''>Lesson 5: Calculus 2</h1>
            <p className='mt-2 mb-20 flex items-center justify-start gap-2'>
              $$ fr 12 to 2 fx dx div z + srt 2
              <br />
              $$ fourier form with n{' '}
            </p>
            <h2>1. Integration Techniques</h2>
            <ul>
              <li>
                Integration by Parts: Used for integrals of products (e.g., ∫x*cos(x) dx). Formula:
                ∫u dv = uv - ∫v du.
              </li>
              <li>
                Trigonometric Substitution: Used for integrals involving √(a²-x²), √(a²+x²),
                √(x²-a²).
              </li>
            </ul>
            <h2>2. Applications of Integration</h2>
            <ul>
              <li>
                Area Between Curves: Finding the area enclosed between two functions, f(x) and g(x),
                from x=a to x=b using ∫[f(x) - g(x)] dx.
              </li>
              <li>
                Volumes of Revolution (Disk/Washer/Shell Methods): Calculating the volume of solids
                generated by revolving a volume of solids generated by revolving a region around an
                axis.
              </li>
            </ul>
            <h2>3. Sequences and Series</h2>
            <ul>
              <li>
                Convergence Tests (Integral Test, Comparison Test, Ratio Test, Root Test):
                Determining if an infinite series converges or diverges.
              </li>
              <li>
                Taylor and Maclaurin Series: Representing functions as infinite sums (power series).
                Example: Finding the area between y=x² and y=x from x=0 to x=1. Area = ∫[x - x²] dx
                from 0 to 1 = [x²/2 - x³/3] from 0 to 1 = (1/2 - 1/3) - (0 - 0) = 1/6.
              </li>
            </ul>
          </div>
          <motion.div
            className='absolute top-5 right-10 px-3'
            animate={{
              x: isHoveredImage ? 100 : 0
            }}
          >
            <Image
              src={MathSuggestSVG}
              alt='Folder Interface'
              className={cn('bg-background/40 scale-90 rounded object-cover backdrop-blur-sm')}
            />
          </motion.div>
          <motion.div
            className='absolute -left-30 px-3'
            style={{ top: 'calc(30%)' }}
            animate={{
              x: isHoveredImage ? -100 : 0
            }}
          >
            <Image
              src={MathSuggest2SVG}
              alt='Folder Interface'
              className={cn(
                'bg-background/50 hidden scale-90 rounded object-cover backdrop-blur-sm md:block md:scale-110'
              )}
            />
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
};

const PoweredByAI = ({ dictionary }: { dictionary: DictionaryType }) => {
  return (
    <div>
      <div className='mx-auto mt-4 flex max-w-7xl flex-col items-start gap-4 px-4 py-4 sm:flex-row sm:gap-6 sm:px-6 sm:py-6 md:gap-10 md:px-10'>
        <h1 className='relative z-20 bg-gradient-to-b from-white via-white to-neutral-800 bg-clip-text text-start font-semibold text-transparent'>
          {dictionary.smartest.aiModels}
        </h1>
        <p className='text-muted-foreground mt-2 max-w-xl sm:mt-5'>
          <span className='font-medium text-white'>{dictionary.smartest.aiModelsTagline}</span>.{' '}
          {dictionary.smartest.aiModelsDescription}
        </p>
      </div>
      <Image
        src={ModelsSVG}
        alt='Models'
        className={cn(
          'h-[300px] w-full object-cover sm:h-[400px] md:h-[600px]',
          'mask-t-from-70% mask-r-from-70% mask-b-from-30% mask-l-from-70% mask-radial-from-80% mask-radial-to-95% mask-radial-at-center'
        )}
      />
    </div>
  );
};

const AIFeatures = ({ dictionary }: { dictionary: DictionaryType }) => {
  return (
    <div className='mx-auto mt-6 flex max-w-7xl flex-row items-start gap-10 px-10 py-6'>
      <FeaturesSectionDemo dictionary={dictionary} />
    </div>
  );
};

export function FeaturesSectionDemo({ dictionary }: { dictionary: DictionaryType }) {
  const features = [
    {
      title: dictionary.smartest.academicallyTuned,
      description: dictionary.smartest.academicallyTunedDesc,
      icon: <IconSchool />
    },
    {
      title: dictionary.smartest.agenticToolset,
      description: dictionary.smartest.agenticToolsetDesc,
      icon: <IconEaseInOut />
    },
    {
      title: dictionary.smartest.realTimeInternet,
      description: dictionary.smartest.realTimeInternetDesc,
      icon: <IconCloudNetwork />
    },
    {
      title: dictionary.smartest.knowsYourKnowledge,
      description: dictionary.smartest.knowsYourKnowledgeDesc,
      icon: <IconBrain />
    },
    {
      title: dictionary.smartest.multiModal,
      description: dictionary.smartest.multiModalDesc,
      icon: <IconPhoto />
    },
    {
      title: dictionary.smartest.speedy,
      description: dictionary.smartest.speedyDesc,
      icon: <IconBolt />
    },
    {
      title: dictionary.smartest.growsWithYou,
      description: dictionary.smartest.growsWithYouDesc,
      icon: <IconAdjustmentsBolt />
    },
    {
      title: dictionary.smartest.everythingElse,
      description: dictionary.smartest.everythingElseDesc,
      icon: <IconHeart />
    }
  ];
  return (
    <div className='relative z-10 mx-auto grid max-w-7xl grid-cols-1 py-10 md:grid-cols-2 lg:grid-cols-4'>
      {features.map((feature, index) => (
        <Feature key={feature.title} {...feature} index={index} />
      ))}
    </div>
  );
}

const Feature = ({
  title,
  description,
  icon,
  index
}: {
  title: string;
  description: string;
  icon: React.ReactNode;
  index: number;
}) => {
  return (
    <div
      className={cn(
        'group/feature relative flex flex-col py-10 lg:border-r dark:border-neutral-800',
        (index === 0 || index === 4) && 'lg:border-l dark:border-neutral-800',
        index < 4 && 'lg:border-b dark:border-neutral-800'
      )}
    >
      {index < 4 && (
        <div className='pointer-events-none absolute inset-0 h-full w-full bg-gradient-to-t from-neutral-100 to-transparent opacity-0 transition duration-200 group-hover/feature:opacity-100 dark:from-neutral-800' />
      )}
      {index >= 4 && (
        <div className='pointer-events-none absolute inset-0 h-full w-full bg-gradient-to-b from-neutral-100 to-transparent opacity-0 transition duration-200 group-hover/feature:opacity-100 dark:from-neutral-800' />
      )}
      <div className='relative z-10 mb-4 px-10 text-neutral-600 dark:text-neutral-400'>{icon}</div>
      <div className='relative z-10 mb-2 px-10 text-lg font-bold'>
        <div className='absolute inset-y-0 left-0 h-6 w-1 origin-center rounded-tr-full rounded-br-full bg-neutral-300 transition-all duration-200 group-hover/feature:h-8 group-hover/feature:bg-blue-500 dark:bg-neutral-700' />
        <span className='inline-block text-neutral-800 transition duration-200 group-hover/feature:translate-x-2 dark:text-neutral-100'>
          {title}
        </span>
      </div>
      <p className='relative z-10 max-w-xs px-10 text-sm text-neutral-600 dark:text-neutral-300'>
        {description}
      </p>
    </div>
  );
};
